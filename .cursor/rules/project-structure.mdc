---
description: 
globs: 
alwaysApply: true
---
# Visionix EMS 폴더 구조 가이드
# Next.js 15 + TypeScript + Drizzle ORM Project Structure

## Project Overview
This is a full-stack web application with counter and guestbook features using Next.js 15, TypeScript, PostgreSQL, and Drizzle ORM.

## Tech Stack
- **Frontend**: Next.js 15, React 19, TypeScript
- **UI**: Radix UI, Tailwind CSS, shadcn/ui
- **Database**: PostgreSQL, Drizzle ORM
- **Styling**: Tailwind CSS v4
- **Forms**: React Hook Form, Zod validation
- **State**: React hooks (useState, useEffect)

## 프로젝트 루트 구조
```
visionix_ems/
├── app/                    # Next.js App Router
├── components/             # React 컴포넌트
├── domain/                 # 도메인 주도 설계
├── lib/                    # 유틸리티 및 설정
├── hooks/                  # 커스텀 React 훅
├── db/                     # 데이터베이스 마이그레이션
├── public/                 # 정적 파일
├── .cursor/                # Cursor IDE 설정
├── .vscode/                # VS Code 설정
├── node_modules/           # 의존성 패키지
├── package.json            # 프로젝트 설정
├── drizzle.config.ts       # Drizzle ORM 설정
├── tsconfig.json           # TypeScript 설정
├── next.config.ts          # Next.js 설정
└── docker-compose.yml      # Docker 설정
```

## 앱 구조 (Next.js App Router)
```
app/
├── layout.tsx              # 루트 레이아웃
├── page.tsx                # 메인 페이지
├── globals.css             # 전역 스타일
├── favicon.ico             # 파비콘
├── device/                 # 디바이스 페이지
│   └── page.tsx
└── api/                    # API 라우트
    └── device/
        └── route.ts
```

## 도메인 구조 (Domain-Driven Design)
```
domain/
└── device/                 # 디바이스 도메인
    ├── model/              # 데이터베이스 스키마
    │   └── device.ts
    ├── dto/                # 데이터 전송 객체
    │   └── device.dto.ts
    ├── repository/         # 데이터 접근 계층
    │   └── device.repository.ts
    └── service/            # 비즈니스 로직
        └── device.service.ts
```

## 컴포넌트 구조
```
components/
├── ui/                     # 공통 UI 컴포넌트 (shadcn/ui)
│   ├── button.tsx
│   ├── input.tsx
│   ├── table.tsx
│   └── ... (기타 UI 컴포넌트들)
└── device/                 # 디바이스 관련 컴포넌트
    ├── device-form.tsx
    └── device-table.tsx
```

## 유틸리티 및 설정
```
lib/
├── db.ts                   # 데이터베이스 연결
└── utils.ts                # 공통 유틸리티

hooks/
└── use-mobile.ts           # 모바일 감지 훅

db/
└── migrations/             # 데이터베이스 마이그레이션
```

## 설정 파일
```
루트 레벨 설정 파일들:
├── package.json            # 프로젝트 의존성 및 스크립트
├── pnpm-lock.yaml          # pnpm 잠금 파일
├── drizzle.config.ts       # Drizzle ORM 설정
├── tsconfig.json           # TypeScript 설정
├── next.config.ts          # Next.js 설정
├── next-env.d.ts           # Next.js 타입 정의
├── postcss.config.mjs      # PostCSS 설정
├── components.json         # shadcn/ui 설정
├── docker-compose.yml      # Docker Compose 설정
├── .gitignore              # Git 무시 파일
└── README.md               # 프로젝트 문서
```

## 도메인 패턴 구조
각 도메인은 다음 4개 폴더를 가져야 합니다:
- `model/` - Drizzle ORM 스키마 정의
- `dto/` - 데이터 전송 객체 및 검증 스키마
- `repository/` - 데이터베이스 접근 로직
- `service/` - 비즈니스 로직

## 파일 명명 규칙
- **컴포넌트**: kebab-case 
- **서비스/유틸리티**: kebab-case (예: `device.service.ts`)
- **모델**: kebab-case (예: `device.ts`)
- **DTO**: kebab-case (예: `device.dto.ts`)
- **설정 파일**: kebab-case (예: `drizzle.config.ts`)

## 새 도메인 추가 시 구조
새로운 도메인을 추가할 때는 다음 구조를 따라야 합니다:
```
domain/{new-domain}/
├── model/
│   └── {new-domain}.ts
├── dto/
│   └── {new-domain}.dto.ts
├── repository/
│   └── {new-domain}.repository.ts
└── service/
    └── {new-domain}.service.ts
```

그리고 관련 컴포넌트와 API 라우트도 추가:
```
components/{new-domain}/
└── {new-domain}-*.tsx

app/{new-domain}/
└── page.tsx

app/api/{new-domain}/
└── route.ts
```

